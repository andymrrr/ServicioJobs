// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServicioJobs.Dal.Contexto;

#nullable disable

namespace ServicioJobs.Dal.Migrations
{
    [DbContext(typeof(ContextServicioJobs))]
    [Migration("20250615015006_MigracionInicial")]
    partial class MigracionInicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ServicioJobs.Modelos.Historico", b =>
                {
                    b.Property<Guid>("IdHistorico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<int>("EstadoHttp")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaEjecucion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaEjecucionFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdProgramado")
                        .HasColumnType("uuid");

                    b.Property<string>("MensajeError")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("IdHistorico");

                    b.HasIndex("IdProgramado");

                    b.ToTable("historico", (string)null);
                });

            modelBuilder.Entity("ServicioJobs.Modelos.Parametro", b =>
                {
                    b.Property<Guid>("IdParametroa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdProgramado")
                        .HasColumnType("uuid");

                    b.Property<string>("Propiedad")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("IdParametroa");

                    b.HasIndex("IdProgramado");

                    b.ToTable("parametro", (string)null);
                });

            modelBuilder.Entity("ServicioJobs.Modelos.Programado", b =>
                {
                    b.Property<Guid>("IdProgramado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CorreoNotificar")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Crontab")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("EstadoEjecucion")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FechaEjecucion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaReintento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("boolean");

                    b.Property<int>("MetodoHttp")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("PeriodoReintento")
                        .HasColumnType("integer");

                    b.Property<int?>("Reintentos")
                        .HasColumnType("integer");

                    b.Property<int?>("ReintentosPermitidos")
                        .HasColumnType("integer");

                    b.Property<int?>("Timeout")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UltimaEjecucion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("UltimaEjecucionExitosa")
                        .HasColumnType("boolean");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("IdProgramado");

                    b.ToTable("programado", (string)null);
                });

            modelBuilder.Entity("ServicioJobs.Modelos.Historico", b =>
                {
                    b.HasOne("ServicioJobs.Modelos.Programado", "Programado")
                        .WithMany("Historicos")
                        .HasForeignKey("IdProgramado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Programado");
                });

            modelBuilder.Entity("ServicioJobs.Modelos.Parametro", b =>
                {
                    b.HasOne("ServicioJobs.Modelos.Programado", "Programado")
                        .WithMany("Parametros")
                        .HasForeignKey("IdProgramado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Programado");
                });

            modelBuilder.Entity("ServicioJobs.Modelos.Programado", b =>
                {
                    b.Navigation("Historicos");

                    b.Navigation("Parametros");
                });
#pragma warning restore 612, 618
        }
    }
}
